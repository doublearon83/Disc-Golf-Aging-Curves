<<<<<<< Updated upstream
clss_kmeans <- matrix(NA, nrow = nrow(clustdm), ncol = length(nc_types))
for (i in 1:length(nc)){
kmout<- kmeans(clustdm[,1:7],centers=nc[i],nstart=20)
clss_kmeans[, i] <- kmout$cluster #call correct column of dataframe
}
km_types <- c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen") #different grouping types from k means
nc_types <- expand.grid(nc, km_types)
clss_kmeans <- matrix(NA, nrow = nrow(clustdm), ncol = length(nc_types))
for (i in 1:length(nc)){
kmout<- kmeans(clustdm[,1:7],centers=nc[i],nstart=20)
clss_kmeans[, i] <- kmout$cluster #call correct column of dataframe
}
km_types <- c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen") #different grouping types from k means
nc_types <- expand.grid(nc, km_types)
clss_kmeans <- matrix(NA, nrow = nrow(clustdm), ncol = length(nc_types))
for (i in 1:length(nc)){
kmout<- kmeans(clustdm[,1:7],centers=nc[i],nstart=20)
clss_kmeans[, i] <- kmout$cluster #call correct column of dataframe
}
head(nc_types)
head(nc_krn)
km_types <- c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen") #different grouping types from k means
nc_types <- expand.grid(nc, km_types) #uses expand grid
clss_kmeans <- as.data.frame(matrix(NA, nrow = nrow(clustdm), ncol = length(nc_types)))
for (i in 1:length(nc)){
kmout<- kmeans(clustdm[,1:7],centers=nc[i],nstart=20)
clss_kmeans[, i] <- kmout$cluster #call correct column of dataframe
}
clss_kmeans <- as.data.frame(clss_kmeans)
head(clss_kmeans)
head(clss_sc)
head(nc_krn)
head(nc_types)
km_types <- c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen") #different grouping types from k means
nc_types <- expand.grid(nc, km_types) #uses expand grid
clss_kmeans <- as.data.frame(matrix(NA, nrow = nrow(clustdm), ncol = nrow(nc_types)))
for (i in 1:length(nc)){
kmout<- kmeans(clustdm[,1:7],centers=nc[i],nstart=20)
clss_kmeans[, i] <- kmout$cluster #call correct column of dataframe
}
clss_kmeans <- as.data.frame(clss_kmeans)
head(clss_kmeans)
clss_kmeans <- as.data.frame(matrix(NA, nrow = nrow(clustdm), ncol = length(nc_types)))
head(clss_kmeans)
nc <- c(2:6)
km_types <- c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen") #different grouping types from k means
nc_types <- expand.grid(nc, km_types) #uses expand grid
clss_kmeans <- as.data.frame(matrix(NA, nrow = nrow(clustdm), ncol = length(nc_types)))
for (i in 1:length(nc)){
kmout<- kmeans(clustdm[,1:7],centers=nc[i],nstart=20)
clss_kmeans[, i] <- kmout$cluster #call correct column of dataframe
}
clss_kmeans <- as.data.frame(clss_kmeans)
head(clss_kmeans)
nc <- c(2:6)
km_types <- c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen") #different grouping types from k means
nc_types <- expand.grid(nc, km_types) #uses expand grid
clss_kmeans <- as.data.frame(matrix(NA, nrow = nrow(clustdm), ncol = nrow(nc_types)))
for (i in 1:length(nc)){
kmout<- kmeans(clustdm[,1:7],centers=nc[i],nstart=20)
clss_kmeans[, i] <- kmout$cluster #call correct column of dataframe
}
clss_kmeans <- as.data.frame(clss_kmeans)
#combine datasets for cross-validation
clustdm_cv <- cbind(clustdm,clss,clss_sc,clss_hc,clss_kmeans)
head(clss_kmeans)
clss_kmeans <- as.data.frame(matrix(NA, nrow = nrow(clustdm), ncol = length(nc_types)))
head(clss_kmeans)
nc <- c(2:6)
km_types <- c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen") #different grouping types from k means
nc_types <- expand.grid(nc, km_types) #uses expand grid
clss_kmeans <- as.data.frame(matrix(NA, nrow = nrow(clustdm), ncol = length(nc_types)))
for (i in 1:length(nc)){
kmout<- kmeans(clustdm[,1:7],centers=nc[i],nstart=20)
clss_kmeans[, i] <- kmout$cluster #call correct column of dataframe
}
clss_kmeans <- as.data.frame(clss_kmeans)
#combine datasets for cross-validation
clustdm_cv <- cbind(clustdm,clss,clss_sc,clss_hc,clss_kmeans)
head(clss_kmeans)
for (i in 1:length(nc)){
kmout<- kmeans(clustdm[,1:7],centers=nc[i],nstart=20)
clss_kmeans[, i] <- kmout$cluster #call correct column of dataframe
}
nc <- c(2:6)
km_types <- c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen") #different grouping types from k means
nc_types <- expand.grid(nc, km_types) #uses expand grid
clss_kmeans <- as.data.frame(matrix(0, nrow = nrow(clustdm), ncol = nrow(nc_types)))
for (i in 1:length(nc)){
kmout<- kmeans(clustdm[,1:7],centers=nc[i],nstart=20)
clss_kmeans[, i] <- kmout$cluster #call correct column of dataframe
}
clss_kmeans <- as.data.frame(clss_kmeans)
head(clss_kmeans)
nc <- c(2:6)
km_types <- c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen") #different grouping types from k means
nc_kmean <- expand.grid(nc, km_types) #uses expand grid
clss_kmeans <- as.data.frame(matrix(0, nrow = nrow(clustdm), ncol = nrow(nc_kmean)))
for (i in 1:nrow(nc_kmean)){
kmout<- kmeans(as.matrix(clustdm[,1:7],centers=nc_kmean[i,1],nstart=20))
clss_kmeans[, i] <- kmout$cluster #call correct column of dataframe
}
nc <- c(2:6)
km_types <- c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen") #different grouping types from k means
nc_kmean <- expand.grid(nc = nc,km_types = km_types) #uses expand grid
clss_kmeans <- as.data.frame(matrix(0, nrow = nrow(clustdm), ncol = nrow(nc_kmean)))
for (i in 1:nrow(nc_kmean)){
kmout<- kmeans(as.matrix(clustdm[,1:7],
centers=nc_kmean$nc[i],
nstart=20,
algorithm = as.character((nc_kmean$km_type[i]))
))
clss_kmeans[, i] <- kmout$cluster #call correct column of dataframe
}
nc <- c(2:6)
km_types <- c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen") #different grouping types from k means
nc_kmean <- expand.grid(nc = nc,km_types = km_types) #uses expand grid
clss_kmeans <- as.data.frame(matrix(0, nrow = nrow(clustdm), ncol = nrow(nc_kmean)))
for (i in 1:nrow(nc_kmean)){
kmout<- kmeans(as.matrix(clustdm[,1:7]),
centers = as.numeric(nc_kmean$nc[i]),
nstart=20,
algorithm = as.character(nc_kmean$km_type[i]))
clss_kmeans[, i] <- kmout$cluster #call correct column of dataframe
}
clss_kmeans <- as.data.frame(clss_kmeans)
head(clss_kmeans)
head(clss_sc)
head(clss_hc)
nc <- c(2:6)
km_types <- c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen") #different grouping types from k means
nc_kmean <- expand.grid(nc = nc,km_types = km_types) #uses expand grid
clss_kmeans <- as.data.frame(matrix(0, nrow = nrow(clustdm), ncol = nrow(nc_kmean)))
for (i in 1:nrow(nc_kmean)){
kmout<- kmeans(as.matrix(clustdm[,1:7]),
centers = as.numeric(nc_kmean$nc[i]),
nstart=20,
algorithm = as.character(nc_kmean$km_type[i]))
clss_kmeans[, i] <- kmout$cluster #call correct column of dataframe
names(clss_kmeans)[i] <- paste(nc_kmean[i,1], nc_kmean[i,2], sep = "_")
}
clss_kmeans <- as.data.frame(clss_kmeans)
head(clss_kmeans)
Error in kmeans(as.matrix(clustdm[, 1:7], centers = nc_kmean$nc[i], nstart = 20,  :
#combine data needed from pre-2020 and post-2020
#>15 and 3 groups for 3 tiers of players
#>25 and 5 groups for 5 types of players
#import data
data_nc19 <- read.csv("data_nc19.csv",header=T)
data_nc <- read.csv("data_nc.csv",header=T)
=======
MPO_a<-read.csv("C:/Users/ahoward1/Documents/Disc golf analytics/Aging curves/Ages",header=T,sep=",")
#Upload and clean age data
MPO_a<-read.csv("C:/Users/ahoward1/Documents/Disc golf analytics/Aging curves/Disc-Golf-Aging-Curves/Ages.csv",header=T,sep=",")
MPO_a$Age<-numeric(nrow(MPO_a))
for (i in 1:nrow(MPO_a)){
MPO_a$Age[i]<-substr(as.character(MPO_a$Date[i]),(nchar(as.character(MPO_a$Date[i]))-3),nchar(as.character(MPO_a$Date[i])))
}
MPO_a$Age<-as.numeric(MPO_a$Age)
#read in outFd for PDGA numbers
outFd<-read.csv("C:/Users/ahoward1/Documents/Disc golf analytics/outFd.csv", sep=",", header=T)
outFd$Last <- sub('.* ','',outFd$Name)
outFd$First <- sub(' .*','',outFd$Name)
MPO_a$PDGA<-outFd$PDGA[match(MPO_a$Last,outFd$Last)]
MPO_a$PDGA[MPO_a$Last=="Ulibarri" & MPO_a$Age=="1979"]<-41750
MPO_a$PDGA[MPO_a$Last=="Johansen" & MPO_a$Age=="1986"]<-42493
MPO_a$PDGA[MPO_a$Last=="Johansen" & MPO_a$Age=="1979"]<-20300
MPO_a$PDGA[MPO_a$Last=="Smith" & MPO_a$Age=="1971"]<-4034
MPO_a$PDGA[MPO_a$Last=="Smith" & MPO_a$Age=="1976"]<-16831
MPO_a$PDGA[MPO_a$Last=="Jones" & MPO_a$Age=="1996"]<-41760
MPO_a$PDGA[MPO_a$Last=="Russell" & MPO_a$Age=="1994"]<-66362
MPO_a$PDGA[MPO_a$Last=="Smith" & MPO_a$Age=="1987"]<-128378
MPO_a$PDGA[MPO_a$Last=="Smith" & MPO_a$Age=="1976"]<-16831
MPO_a$PDGA[MPO_a$Last=="Smith" & MPO_a$Age=="1971"]<-4034
MPO_a$PDGA[MPO_a$Last=="Smith" & MPO_a$Age=="2004"]<-101574
MPO_a$PDGA[MPO_a$Last=="Henson"]<-60440
MPO_a$PDGA[MPO_a$Last=="Budge"]<-90487
MPO_a$PDGA[MPO_a$Last=="Kester IV"]<-36777
MPO_a$PDGA[MPO_a$Last=="McClellan"]<-3566
MPO_a$PDGA[MPO_a$Last=="McRee"]<-7883
MPO_a$PDGA[MPO_a$Last=="M?ller"]<-4498
MPO_a$PDGA[MPO_a$Last=="O'Reilly"]<-99648
MPO_a$PDGA[MPO_a$Last=="Palmeri"]<-23
MPO_a$PDGA[MPO_a$Last=="Rainey"]<-41947
MPO_a$PDGA[MPO_a$Last=="Sheehan Jr."]<-62461
MPO_a$PDGA[MPO_a$Last=="Conrad"]<-17295
MPO_a$PDGA[MPO_a$Last=="Rico"]<-4666
MPO_a$PDGA[MPO_a$Last=="Schultz"]<-6840
MPO_a<-MPO_a[complete.cases(MPO_a[,c(1,2,5,6)]),c(1,2,5,6)]
MPO_a<-MPO_a[1:which(MPO_a$Last=="Wysocki"),]
which(table(MPO_a$Last)>=2)
#scrape ratings data
require(rvest)
MPO_a$avail<-numeric(nrow(MPO_a));PDGA<-numeric()
event <- read_html(paste("https://www.pdga.com/player/",MPO_a$PDGA[1],"/history",sep=""))
ratd<-event %>%
html_nodes(".date") %>%
html_text()
ratr<-event %>%
html_nodes(".player-rating") %>%
html_text()
ratrd<-event %>%
html_nodes(".round") %>%
html_text()
if (length(ratd)!=0) {MPO_a$avail[1]<-"y"} else {MPO_a$avail[1]<-"n"}
if (length(ratd)!=0) {PDGA<-rep(MPO_a$PDGA[1],length(ratd))}
for (i in 2:nrow(MPO_a)) {
event <- read_html(paste("https://www.pdga.com/player/",MPO_a$PDGA[i],"/history",sep=""))
ratd1<-event %>%
html_nodes(".date") %>%
html_text()
ratd<-c(ratd,ratd1)
ratr1<-event %>%
html_nodes(".player-rating") %>%
html_text()
ratr<-c(ratr,ratr1)
ratrd1<-event %>%
html_nodes(".round") %>%
html_text()
ratrd<-c(ratrd,ratrd1)
if (length(ratd1)!=0) {MPO_a$avail[i]<-"y"} else {MPO_a$avail[i]<-"n"}
if (length(ratd1)!=0) {PDGA<-c(PDGA,rep(MPO_a$PDGA[i],length(ratd1)))}
print(i)
}
MPO_a<-MPO_a[MPO_a$avail=="y",]
ratd<-ratd[ratd!="Effective Date"]
ratr<-ratr[ratr!="Rating"]
ratrd<-ratrd[ratrd!="Rounds Used"]
MPO_ar<-data.frame(ratd,ratr,ratrd)
#formatting data
MPO_a<-MPO_a[order(unique(PDGA)),]
MPO_ar<-MPO_ar[order(PDGA),]
MPO_ar$Name<-rep(MPO_a$Last,table(PDGA))
MPO_ar$Name_f<-rep(MPO_a$First,table(PDGA))
MPO_ar$Byear<-rep(MPO_a$Age,table(PDGA))
MPO_ar$PDGA<-rep(MPO_a$PDGA,table(PDGA))
MPO_ar<-MPO_ar[MPO_ar$ratd!="Effective Date",]
#reduce MPO_ar$ratd to just year
MPO_ar$year<-numeric(nrow(MPO_ar))
for (i in 1:nrow(MPO_ar)){
MPO_ar$year[i]<-substr(as.character(MPO_ar$ratd[i]),(nchar(as.character(MPO_ar$ratd[i]))-3),nchar(as.character(MPO_ar$ratd[i])))
}
MPO_ar$year<-as.numeric(MPO_ar$year)
#Calculate age
MPO_ar$Age<-MPO_ar$year-MPO_ar$Byear
MPO_ar$ratr<-as.numeric(as.character(MPO_ar$ratr))
MPO_ar$ratrd<-as.numeric(as.character(MPO_ar$ratrd))
write.csv(MPO_ar,"MPO_ar.csv")
#import data
data_nc19 <- read.csv("data_nc19.csv",header=T)
data_nc <- read.csv("data_nc.csv",header=T)
unique(data_nc$Year)
unique(data_nc19$Year)
str(data_nc19)
data_nc19 <- read.csv("data_nc19.csv",header=T)
data_nc <- read.csv("data_nc.csv",header=T)
>>>>>>> Stashed changes
data_nc_comb <- rbind(data_nc19[,c(3,19:26)],data_nc[,c(3,23:30)])
clustd<-data_nc_comb
fhz<-tapply(clustd$Fairway.Hitsz,clustd$Name,mean,na.rm=T)
c1z<-tapply(clustd$Circle.1z,clustd$Name,mean,na.rm=T)
c2z<-tapply(clustd$Circle.2z,clustd$Name,mean,na.rm=T)
sz<-tapply(clustd$Scramblez,clustd$Name,mean,na.rm=T)
c1pz<-tapply(clustd$Circle.1.Puttingz,clustd$Name,mean,na.rm=T)
c2pz<-tapply(clustd$Circle.2.Puttingz,clustd$Name,mean,na.rm=T)
obz<-tapply(clustd$OBz,clustd$Name,mean,na.rm=T)
names<-names(fhz)
#create dataset for clustering
clustdm<-data.frame(fhz,c1z,c2z,sz,c1pz,c2pz,obz,names)
clustdm<-clustdm[table(data_nc_comb$Name)>5,] #removing players who played fewer than 5 events
clustdm<-clustdm[complete.cases(clustdm),]
#number of clusters (classes or player types)
nc <- c(2:6)
#############################
###hierarchical clustering###
#############################
dist_type <- c("euclidean","maximum","manhattan")
nc_dist_type <- expand.grid(nc,dist_type)
clss_hc <- as.data.frame(matrix(0,nrow=nrow(clustdm),ncol=nrow(nc_dist_type)))
for (i in 1:nrow(nc_dist_type)) {
dist_mat <- dist(clustdm[,1:7], method = nc_dist_type[i,2])
hclust_avg <- hclust(dist_mat, method = 'average')
#plot(hclust_avg)
cut_avg <- cutree(hclust_avg, k = nc_dist_type[i,1])
clss_hc[,i] <- as.numeric(cut_avg)
names(clss_hc)[i] <- paste(nc_dist_type[i,1],nc_dist_type[i,2],sep="_")
}
#require(dendextend)
#suppressPackageStartupMessages(library(dendextend))
#avg_dend_obj <- as.dendrogram(hclust_avg)
#avg_col_dend <- color_branches(avg_dend_obj, h = 5)
#plot(avg_col_dend)
####################
###GMM clustering###
####################
require(ClusterR)
#finding number of classes
opt_gmm = Optimal_Clusters_GMM(clustdm[,1:7], max_clusters = 10, criterion = "BIC",
dist_mode = "maha_dist", seed_mode = "random_subset",
km_iter = 10, em_iter = 10, var_floor = 1e-10,
plot_data = T)
<<<<<<< Updated upstream
#generate predictions for 2-6 classes
nc <- c(2:6) #setting number of clusters
clss <- as.data.frame(matrix(0,nrow=nrow(clustdm),ncol=length(nc))) #dataframe for output from models
for (i in 1:length(nc)) { #setup loop to run 5 times
#generating classes
gmm = GMM(clustdm[,1:7], nc[i], dist_mode = "maha_dist", seed_mode = "random_subset", km_iter = 10,
em_iter = 10, verbose = F)
#predicting class
pr = predict_GMM(clustdm[,1:7], gmm$centroids, gmm$covariance_matrices, gmm$weights)
#creating vector of class predictions
clss[,i] <- pr$cluster_labels
names(clss)[i] <- paste("nc",nc[i],sep="")
}
#plotting GMM results
require(ggplot2)
ggplot(clustdm, aes(x=c1z, y = c1pz, color = factor(cluster_labels))) + geom_point(size=3)
#combine data needed from pre-2020 and post-2020
#>15 and 3 groups for 3 tiers of players
#>25 and 5 groups for 5 types of players
#import data
=======
>>>>>>> Stashed changes
data_nc19 <- read.csv("data_nc19.csv",header=T)
data_nc <- read.csv("data_nc.csv",header=T)
data_nc_comb <- rbind(data_nc19[,c(3,19:26)],data_nc[,c(3,23:30)])
clustd<-data_nc_comb
fhz<-tapply(clustd$Fairway.Hitsz,clustd$Name,mean,na.rm=T)
c1z<-tapply(clustd$Circle.1z,clustd$Name,mean,na.rm=T)
c2z<-tapply(clustd$Circle.2z,clustd$Name,mean,na.rm=T)
sz<-tapply(clustd$Scramblez,clustd$Name,mean,na.rm=T)
c1pz<-tapply(clustd$Circle.1.Puttingz,clustd$Name,mean,na.rm=T)
c2pz<-tapply(clustd$Circle.2.Puttingz,clustd$Name,mean,na.rm=T)
obz<-tapply(clustd$OBz,clustd$Name,mean,na.rm=T)
names<-names(fhz)
#create dataset for clustering
clustdm<-data.frame(fhz,c1z,c2z,sz,c1pz,c2pz,obz,names)
clustdm<-clustdm[table(data_nc_comb$Name)>5,] #removing players who played fewer than 5 events
clustdm<-clustdm[complete.cases(clustdm),]
#number of clusters (classes or player types)
nc <- c(2:6)
#############################
###hierarchical clustering###
#############################
dist_type <- c("euclidean","maximum","manhattan")
nc_dist_type <- expand.grid(nc,dist_type)
clss_hc <- as.data.frame(matrix(0,nrow=nrow(clustdm),ncol=nrow(nc_dist_type)))
for (i in 1:nrow(nc_dist_type)) {
dist_mat <- dist(clustdm[,1:7], method = nc_dist_type[i,2])
hclust_avg <- hclust(dist_mat, method = 'average')
#plot(hclust_avg)
cut_avg <- cutree(hclust_avg, k = nc_dist_type[i,1])
clss_hc[,i] <- as.numeric(cut_avg)
names(clss_hc)[i] <- paste(nc_dist_type[i,1],nc_dist_type[i,2],sep="_")
}
#require(dendextend)
#suppressPackageStartupMessages(library(dendextend))
#avg_dend_obj <- as.dendrogram(hclust_avg)
#avg_col_dend <- color_branches(avg_dend_obj, h = 5)
#plot(avg_col_dend)
####################
###GMM clustering###
####################
require(ClusterR)
#finding number of classes
opt_gmm = Optimal_Clusters_GMM(clustdm[,1:7], max_clusters = 10, criterion = "BIC",
dist_mode = "maha_dist", seed_mode = "random_subset",
km_iter = 10, em_iter = 10, var_floor = 1e-10,
plot_data = T)
#generate predictions for 2-6 classes
<<<<<<< Updated upstream
nc <- c(2:6) #setting number of clusters
clss <- as.data.frame(matrix(0,nrow=nrow(clustdm),ncol=length(nc))) #dataframe for output from models
for (i in 1:length(nc)) { #setup loop to run 5 times
#generating classes
gmm = GMM(clustdm[,1:7], nc[i], dist_mode = "maha_dist", seed_mode = "random_subset", km_iter = 10,
em_iter = 10, verbose = F)
#predicting class
pr = predict_GMM(clustdm[,1:7], gmm$centroids, gmm$covariance_matrices, gmm$weights)
#creating vector of class predictions
clss[,i] <- pr$cluster_labels
names(clss)[i] <- paste("nc",nc[i],sep="")
}
#plotting GMM results
require(ggplot2)
ggplot(clustdm, aes(x=c1z, y = c1pz, color = factor(cluster_labels))) + geom_point(size=3)
ggplot(clustdm, aes(x=c1z, y = c1pz, color = factor(cluster_labels))) + geom_point(size=3)
pp <- apply(clustdm[,c(2,3,5,6)], 2, function(x) tapply(x, clustdm$cluster_labels, mean,na.rm=T))
ggplot(clss_kmeans)
plot(clss_kmeans)
wss <- numeric(length(nc))  # Store WSS values
for (i in seq_along(nc)) {
kmout <- kmeans(as.matrix(clustdm[, 1:7]), centers = nc[i], nstart = 20)
wss[i] <- kmout$tot.withinss  # Store within-cluster sum of squares
}
# Plot WSS
plot(nc, wss, type = "b", pch = 19, frame = FALSE,
xlab = "Number of Clusters (k)", ylab = "Total Within-Cluster SS",
main = "Elbow Method for Optimal k")
head(clss_kmeans)
require(lme4)
require(lmerTest)
require(MuMIn)
require(cAIC4)
# read in age and PDGA data
MPO_ar <- read.csv("MPO_ar.csv",header=T)
#MPO_ar dataset comes from "MPO_Aging.r" script
MPO_ar$years<-scale(MPO_ar$year)
MPO_ar$ages<-scale(MPO_ar$Age)
#combine ratings and classes (data comes from Player_type.r) for cross-validation of ratings
#can I make this betterc(faster) by pasting all at once then just using match to subset rows?
MPO_ar_tune <- data.frame(matrix(0,nrow=nrow(MPO_ar),ncol=ncol(cbind(clss,clss_sc,clss_hc))))
for (i in 1:nrow(MPO_ar))
{
if (any(grepl(MPO_ar$Name[i],clustdm_cv$names))) {MPO_ar_tune[i,]<-as.numeric(clustdm_cv[grep(paste(MPO_ar$Name_f[i],MPO_ar$Name[i],sep = " "),clustdm_cv$names),c(9:ncol(clustdm_cv))])}
else (MPO_ar_tune[i,]<-"NA")
}
# read in age and PDGA data
MPO_ar <- read.csv("MPO_ar.csv",header=T)
#MPO_ar dataset comes from "MPO_Aging.r" script
MPO_ar$years<-scale(MPO_ar$year)
MPO_ar$ages<-scale(MPO_ar$Age)
#combine ratings and classes (data comes from Player_type.r) for cross-validation of ratings
#can I make this betterc(faster) by pasting all at once then just using match to subset rows?
MPO_ar_tune <- data.frame(matrix(0,nrow=nrow(MPO_ar),ncol=ncol(cbind(clss,clss_sc,clss_hc))))
for (i in 1:nrow(MPO_ar))
{
if (any(grepl(MPO_ar$Name[i],clustdm_cv$names))) {MPO_ar_tune[i,]<-as.numeric(clustdm_cv[grep(paste(MPO_ar$Name_f[i],MPO_ar$Name[i],sep = " "),clustdm_cv$names),c(9:ncol(clustdm_cv))])}
else (MPO_ar_tune[i,]<-"NA")
}
#remove NAs and player type 3 (not enough age data for player type 3)
#MPO_ar_pt <- subset(MPO_ar,MPO_ar$ptype!="NA" & MPO_ar$ptype!="3")
# run cross-validation to compare predictions of age curves including
# player type versus excluding player type
#create dataframe for tuning and remove NAs
MPO_ar_tune2 <- data.frame(MPO_ar,MPO_ar_tune)
names(MPO_ar_tune2)[(ncol(MPO_ar_tune2)-44):ncol(MPO_ar_tune2)] <- names(clustdm_cv)[(ncol(clustdm_cv)-44):ncol(clustdm_cv)]
MPO_ar_pt <- subset(MPO_ar_tune2,MPO_ar_tune2$nc2!="NA")
#run loops
mean_SS_t <- data.frame(matrix(0,nrow=ncol(cbind(clss,clss_sc,clss_hc,clss_kmeans)),ncol=2))
for (j in (ncol(MPO_ar_tune2)-44):ncol(MPO_ar_tune2)) {
sumsq_p<-numeric(1000)
sumsq<-numeric(1000)
#training size
tz <- round(length(unique(MPO_ar_pt$PDGA))*.8)
for (i in 1:1000){
train <- sample(unique(MPO_ar_pt$PDGA),tz)
test <- unique(MPO_ar_pt$PDGA)[!unique(MPO_ar_pt$PDGA) %in% train]
MPO_ar_pt_train <- MPO_ar_pt[MPO_ar_pt$PDGA %in% train,]
MPO_ar_pt_test <- MPO_ar_pt[MPO_ar_pt$PDGA %in% test,]
pt_type <- MPO_ar_pt_train[,j]
pt_ages <- MPO_ar_pt_train$ages
pt_ratr <- MPO_ar_pt_train$ratr
MPO_ar_pt_train2 <- data.frame(pt_type,pt_ages,pt_ratr)
outp<-lm(pt_ratr~pt_type*pt_ages+pt_type*I(pt_ages^2)+pt_type*I(pt_ages^3)+pt_type*I(pt_ages^4),data=MPO_ar_pt_train2)
pt_type <- MPO_ar_pt_test[,j]
pt_ages <- MPO_ar_pt_test$ages
pt_ratr <- MPO_ar_pt_test$ratr
MPO_ar_pt_test2 <- data.frame(pt_type,pt_ages,pt_ratr)
#what is our method of measuring model predictive power
sumsq_p[i] <- sum((predict(outp,MPO_ar_pt_test2)-MPO_ar_pt_test2$pt_ratr)^2)
out<-lm(ratr~ages+I(ages^2)+I(ages^3)+I(ages^4),data=MPO_ar_pt_train)
sumsq[i] <- sum((predict(out,MPO_ar_pt_test)-MPO_ar_pt_test$ratr)^2)
}
mean_SS_t[j+1-13,1] <- mean(sumsq_p)
mean_SS_t[j+1-13,2] <- mean(sumsq)
print(j)
}
sumsq_p[i] <- sum((predict(outp,MPO_ar_pt_test2)-MPO_ar_pt_test2$pt_ratr)^2)
head(clss_kmeans)
?kmeans
#combine data needed from pre-2020 and post-2020
#>15 and 3 groups for 3 tiers of players
#>25 and 5 groups for 5 types of players
#import data
data_nc19 <- read.csv("data_nc19.csv",header=T)
data_nc <- read.csv("data_nc.csv",header=T)
data_nc_comb <- rbind(data_nc19[,c(3,19:26)],data_nc[,c(3,23:30)])
clustd<-data_nc_comb
fhz<-tapply(clustd$Fairway.Hitsz,clustd$Name,mean,na.rm=T)
c1z<-tapply(clustd$Circle.1z,clustd$Name,mean,na.rm=T)
c2z<-tapply(clustd$Circle.2z,clustd$Name,mean,na.rm=T)
sz<-tapply(clustd$Scramblez,clustd$Name,mean,na.rm=T)
c1pz<-tapply(clustd$Circle.1.Puttingz,clustd$Name,mean,na.rm=T)
c2pz<-tapply(clustd$Circle.2.Puttingz,clustd$Name,mean,na.rm=T)
obz<-tapply(clustd$OBz,clustd$Name,mean,na.rm=T)
names<-names(fhz)
#create dataset for clustering
clustdm<-data.frame(fhz,c1z,c2z,sz,c1pz,c2pz,obz,names)
clustdm<-clustdm[table(data_nc_comb$Name)>5,] #removing players who played fewer than 5 events
clustdm<-clustdm[complete.cases(clustdm),]
#number of clusters (classes or player types)
nc <- c(2:6)
#############################
###hierarchical clustering###
#############################
dist_type <- c("euclidean","maximum","manhattan")
nc_dist_type <- expand.grid(nc,dist_type)
clss_hc <- as.data.frame(matrix(0,nrow=nrow(clustdm),ncol=nrow(nc_dist_type)))
for (i in 1:nrow(nc_dist_type)) {
dist_mat <- dist(clustdm[,1:7], method = nc_dist_type[i,2])
hclust_avg <- hclust(dist_mat, method = 'average')
#plot(hclust_avg)
cut_avg <- cutree(hclust_avg, k = nc_dist_type[i,1])
clss_hc[,i] <- as.numeric(cut_avg)
names(clss_hc)[i] <- paste(nc_dist_type[i,1],nc_dist_type[i,2],sep="_")
}
#require(dendextend)
#suppressPackageStartupMessages(library(dendextend))
#avg_dend_obj <- as.dendrogram(hclust_avg)
#avg_col_dend <- color_branches(avg_dend_obj, h = 5)
#plot(avg_col_dend)
####################
###GMM clustering###
####################
require(ClusterR)
#finding number of classes
opt_gmm = Optimal_Clusters_GMM(clustdm[,1:7], max_clusters = 10, criterion = "BIC",
dist_mode = "maha_dist", seed_mode = "random_subset",
km_iter = 10, em_iter = 10, var_floor = 1e-10,
plot_data = T)
#generate predictions for 2-6 classes
nc <- c(2:6) #setting number of clusters
clss <- as.data.frame(matrix(0,nrow=nrow(clustdm),ncol=length(nc))) #dataframe for output from models
for (i in 1:length(nc)) { #setup loop to run 5 times
=======
nc <- c(2:6)
clss <- as.data.frame(matrix(0,nrow=nrow(clustdm),ncol=length(nc)))
for (i in 1:length(nc)) {
>>>>>>> Stashed changes
#generating classes
gmm = GMM(clustdm[,1:7], nc[i], dist_mode = "maha_dist", seed_mode = "random_subset", km_iter = 10,
em_iter = 10, verbose = F)
#predicting class
pr = predict_GMM(clustdm[,1:7], gmm$centroids, gmm$covariance_matrices, gmm$weights)
#creating vector of class predictions
clss[,i] <- pr$cluster_labels
names(clss)[i] <- paste("nc",nc[i],sep="")
}
<<<<<<< Updated upstream
#plotting GMM results
require(ggplot2)
ggplot(clustdm, aes(x=c1z, y = c1pz, color = factor(cluster_labels))) + geom_point(size=3)
#spectral clustering
#predictions for 2-6 classes and kernels
=======
>>>>>>> Stashed changes
require(kernlab)
krn <- c("rbfdot","polydot","laplacedot","anovadot","splinedot")
nc_krn <- expand.grid(nc,krn)
clss_sc <- as.data.frame(matrix(0,nrow=nrow(clustdm),ncol=nrow(nc_krn)))
for (i in 1:nrow(nc_krn)) {
sc <- specc(as.matrix(clustdm[,1:7]), centers = nc_krn[i,1], kernel = nc_krn[i,2], kpar = "local")
clss_sc[,i] <- as.numeric(sc@.Data)
names(clss_sc)[i] <- paste(nc_krn[i,1],nc_krn[i,2],sep="_")
}
<<<<<<< Updated upstream
#plotting SC results
ggplot(clustdm, aes(x=c1z, y = c1pz, color = factor(cluster_labels_SC))) + geom_point(size=3)
=======
#combine datasets for cross-validation
clustdm_cv <- cbind(clustdm,clss,clss_sc,clss_hc)
# read in age and PDGA data
MPO_ar <- read.csv("MPO_ar.csv",header=T)
#MPO_ar dataset comes from "MPO_Aging.r" script
MPO_ar$years<-scale(MPO_ar$year)
MPO_ar$ages<-scale(MPO_ar$Age)
MPO_ar_tune <- data.frame(matrix(0,nrow=nrow(MPO_ar),ncol=ncol(cbind(clss,clss_sc,clss_hc))))
for (i in 1:nrow(MPO_ar))
{
if (any(grepl(MPO_ar$Name[i],clustdm_cv$names))) {MPO_ar_tune[i,]<-as.numeric(clustdm_cv[grep(paste(MPO_ar$Name_f[i],MPO_ar$Name[i],sep = " "),clustdm_cv$names),c(9:ncol(clustdm_cv))])}
else (MPO_ar_tune[i,]<-"NA")
}
str(MPO_ar_tune)
str(MPO_ar)
#create dataframe for tuning and remove NAs
MPO_ar_tune2 <- data.frame(MPO_ar,MPO_ar_tune)
names(MPO_ar_tune2)[(ncol(MPO_ar_tune2)-44):ncol(MPO_ar_tune2)] <- names(clustdm_cv)[(ncol(clustdm_cv)-44):ncol(clustdm_cv)]
MPO_ar_pt <- subset(MPO_ar_tune2,MPO_ar_tune2$nc2!="NA")
str(MPO_ar_pt)
MPO_ar_pt[MPO_ar_pt$Name=="McBeth",]
col(MPO_ar_tune2)-44)
ncol(MPO_ar_tune2)-44)
ncol(MPO_ar_tune2)-44
mean_SS_t <- data.frame(matrix(0,nrow=ncol(cbind(clss,clss_sc,clss_hc)),ncol=2))
ncol(MPO_ar_tune2)
57-12
(ncol(MPO_ar_tune2)-44)
mean_SS_t
(j+1)-(ncol(MPO_ar_tune2)-44)
j<-1
(j+1)-(ncol(MPO_ar_tune2)-44)
(ncol(MPO_ar_tune2)-44):ncol(MPO_ar_tune2))
ncol(MPO_ar_tune2)-44):ncol(MPO_ar_tune2)
ncol(MPO_ar_tune2)
(ncol(MPO_ar_tune2)-44):ncol(MPO_ar_tune2)
j<-13
j+1-13
j<-57
j+1-13
j<-13
mean_SS_t <- data.frame(matrix(0,nrow=ncol(cbind(clss,clss_sc,clss_hc)),ncol=2))
sumsq_p<-numeric(1000)
sumsq<-numeric(1000)
#training size
tz <- round(length(unique(MPO_ar_pt$PDGA))*.8)
for (i in 1:1000){
train <- sample(unique(MPO_ar_pt$PDGA),tz)
test <- unique(MPO_ar_pt$PDGA)[!unique(MPO_ar_pt$PDGA) %in% train]
MPO_ar_pt_train <- MPO_ar_pt[MPO_ar_pt$PDGA %in% train,]
MPO_ar_pt_test <- MPO_ar_pt[MPO_ar_pt$PDGA %in% test,]
outp<-lm(ratr~MPO_ar_pt_train[,j]*ages+MPO_ar_pt_train[,j]*I(ages^2)+MPO_ar_pt_train[,j]*I(ages^3),data=MPO_ar_pt_train)
sumsq_p[i] <- sum((predict(outp,MPO_ar_pt_test)-MPO_ar_pt_test$ratr)^2)
out<-lm(ratr~ages+I(ages^2)+I(ages^3),data=MPO_ar_pt_train)
sumsq[i] <- sum((predict(out,MPO_ar_pt_test)-MPO_ar_pt_test$ratr)^2)
}
i
train <- sample(unique(MPO_ar_pt$PDGA),tz)
test <- unique(MPO_ar_pt$PDGA)[!unique(MPO_ar_pt$PDGA) %in% train]
MPO_ar_pt_train <- MPO_ar_pt[MPO_ar_pt$PDGA %in% train,]
MPO_ar_pt_test <- MPO_ar_pt[MPO_ar_pt$PDGA %in% test,]
outp<-lm(ratr~MPO_ar_pt_train[,j]*ages+MPO_ar_pt_train[,j]*I(ages^2)+MPO_ar_pt_train[,j]*I(ages^3),data=MPO_ar_pt_train)
predict(outp,MPO_ar_pt_test)
MPO_ar_pt_test
?predict
outp
out<-lm(ratr~ages+I(ages^2)+I(ages^3),data=MPO_ar_pt_train)
sumsq[i] <- sum((predict(out,MPO_ar_pt_test)-MPO_ar_pt_test$ratr)^2)
pt_train <- MPO_ar_pt_train[,j]
pt_ages <- MPO_ar_pt_train$ages
MPO_ar_pt_train2 <- data.frame(pt_train,pt_ages)
outp<-lm(ratr~pt_train*pt_ages+pt_train*I(pt_ages^2)+pt_train*I(pt_ages^3),data=MPO_ar_pt_train2)
pt_train <- MPO_ar_pt_train[,j]
pt_ages <- MPO_ar_pt_train$ages
MPO_ar_pt_train2 <- data.frame(pt_train,pt_ages)
str(MPO_at_pt_train2)
str(MPO_ar_pt_train2)
pt_train <- MPO_ar_pt_train[,j]
pt_ages <- MPO_ar_pt_train$ages
MPO_ar_pt_train2 <- data.frame(pt_train,pt_ages)
pt_train <- MPO_ar_pt_train[,j]
pt_ages <- MPO_ar_pt_train$ages
pt_ratr <- MPO_ar_pt_train$ratr
MPO_ar_pt_train2 <- data.frame(pt_train,pt_ages,ratr)
outp<-lm(ratr~pt_train*pt_ages+pt_train*I(pt_ages^2)+pt_train*I(pt_ages^3),data=MPO_ar_pt_train2)
pt_train <- MPO_ar_pt_train[,j]
pt_ages <- MPO_ar_pt_train$ages
pt_ratr <- MPO_ar_pt_train$ratr
MPO_ar_pt_train2 <- data.frame(pt_train,pt_ages,pt_ratr)
outp<-lm(ratr~pt_train*pt_ages+pt_train*I(pt_ages^2)+pt_train*I(pt_ages^3),data=MPO_ar_pt_train2)
pt_train
outp<-lm(ratr~pt_train*pt_age)
outp<-lm(ratr~pt_train*pt_ages)
outp<-lm(pt_ratr~pt_train*pt_ages+pt_train*I(pt_ages^2)+pt_train*I(pt_ages^3),data=MPO_ar_pt_train2)
pt_type <- MPO_ar_pt_train[,j]
pt_ages <- MPO_ar_pt_train$ages
pt_ratr <- MPO_ar_pt_train$ratr
MPO_ar_pt_train2 <- data.frame(pt_train,pt_ages,pt_ratr)
outp<-lm(pt_ratr~pt_type*pt_ages+pt_type*I(pt_ages^2)+pt_type*I(pt_ages^3),data=MPO_ar_pt_train2)
pt_type <- MPO_ar_pt_test[,j]
pt_ages <- MPO_ar_pt_test$ages
pt_ratr <- MPO_ar_pt_test$ratr
MPO_ar_pt_test2 <- data.frame(pt_train,pt_ages,pt_ratr)
pt_type <- MPO_ar_pt_train[,j]
pt_ages <- MPO_ar_pt_train$ages
pt_ratr <- MPO_ar_pt_train$ratr
pt_type <- MPO_ar_pt_train[,j]
pt_ages <- MPO_ar_pt_train$ages
pt_ratr <- MPO_ar_pt_train$ratr
MPO_ar_pt_train2 <- data.frame(pt_type,pt_ages,pt_ratr)
outp<-lm(pt_ratr~pt_type*pt_ages+pt_type*I(pt_ages^2)+pt_type*I(pt_ages^3),data=MPO_ar_pt_train2)
pt_type <- MPO_ar_pt_test[,j]
pt_ages <- MPO_ar_pt_test$ages
pt_ratr <- MPO_ar_pt_test$ratr
MPO_ar_pt_test2 <- data.frame(pt_type,pt_ages,pt_ratr)
sumsq_p[i] <- sum((predict(outp,MPO_ar_pt_test2)-MPO_ar_pt_test2$pt_ratr)^2)
sumsq_p[i]
j
sumsq_p<-numeric(1000)
sumsq<-numeric(1000)
#training size
tz <- round(length(unique(MPO_ar_pt$PDGA))*.8)
for (i in 1:1000){
train <- sample(unique(MPO_ar_pt$PDGA),tz)
test <- unique(MPO_ar_pt$PDGA)[!unique(MPO_ar_pt$PDGA) %in% train]
MPO_ar_pt_train <- MPO_ar_pt[MPO_ar_pt$PDGA %in% train,]
MPO_ar_pt_test <- MPO_ar_pt[MPO_ar_pt$PDGA %in% test,]
pt_type <- MPO_ar_pt_train[,j]
pt_ages <- MPO_ar_pt_train$ages
pt_ratr <- MPO_ar_pt_train$ratr
MPO_ar_pt_train2 <- data.frame(pt_type,pt_ages,pt_ratr)
outp<-lm(pt_ratr~pt_type*pt_ages+pt_type*I(pt_ages^2)+pt_type*I(pt_ages^3),data=MPO_ar_pt_train2)
pt_type <- MPO_ar_pt_test[,j]
pt_ages <- MPO_ar_pt_test$ages
pt_ratr <- MPO_ar_pt_test$ratr
MPO_ar_pt_test2 <- data.frame(pt_type,pt_ages,pt_ratr)
sumsq_p[i] <- sum((predict(outp,MPO_ar_pt_test2)-MPO_ar_pt_test2$pt_ratr)^2)
out<-lm(ratr~ages+I(ages^2)+I(ages^3),data=MPO_ar_pt_train)
sumsq[i] <- sum((predict(out,MPO_ar_pt_test)-MPO_ar_pt_test$ratr)^2)
}
mean_SS_t[j+1-13,1] <- mean(sumsq_p)
mean_SS_t[j+1-13,2] <- mean(sumsq)
print(j)
mean(sumsq_p)
mean(sumsq)
j<-16
sumsq_p<-numeric(1000)
sumsq<-numeric(1000)
#training size
tz <- round(length(unique(MPO_ar_pt$PDGA))*.8)
for (i in 1:1000){
train <- sample(unique(MPO_ar_pt$PDGA),tz)
test <- unique(MPO_ar_pt$PDGA)[!unique(MPO_ar_pt$PDGA) %in% train]
MPO_ar_pt_train <- MPO_ar_pt[MPO_ar_pt$PDGA %in% train,]
MPO_ar_pt_test <- MPO_ar_pt[MPO_ar_pt$PDGA %in% test,]
pt_type <- MPO_ar_pt_train[,j]
pt_ages <- MPO_ar_pt_train$ages
pt_ratr <- MPO_ar_pt_train$ratr
MPO_ar_pt_train2 <- data.frame(pt_type,pt_ages,pt_ratr)
outp<-lm(pt_ratr~pt_type*pt_ages+pt_type*I(pt_ages^2)+pt_type*I(pt_ages^3),data=MPO_ar_pt_train2)
pt_type <- MPO_ar_pt_test[,j]
pt_ages <- MPO_ar_pt_test$ages
pt_ratr <- MPO_ar_pt_test$ratr
MPO_ar_pt_test2 <- data.frame(pt_type,pt_ages,pt_ratr)
sumsq_p[i] <- sum((predict(outp,MPO_ar_pt_test2)-MPO_ar_pt_test2$pt_ratr)^2)
out<-lm(ratr~ages+I(ages^2)+I(ages^3),data=MPO_ar_pt_train)
sumsq[i] <- sum((predict(out,MPO_ar_pt_test)-MPO_ar_pt_test$ratr)^2)
}
mean_SS_t[j+1-13,1] <- mean(sumsq_p)
mean_SS_t[j+1-13,2] <- mean(sumsq)
print(j)
mean(sumsq_p)
mean(sumsq)
require(lme4)
require(lmerTest)
require(MuMIn)
require(cAIC4)
# read in age and PDGA data
MPO_ar <- read.csv("MPO_ar.csv",header=T)
#MPO_ar dataset comes from "MPO_Aging.r" script
MPO_ar$years<-scale(MPO_ar$year)
MPO_ar$ages<-scale(MPO_ar$Age)
#combine ratings and classes (data comes from Player_type.r) for cross-validation of ratings
#can I make this betterc(faster) by pasting all at once then just using match to subset rows?
MPO_ar_tune <- data.frame(matrix(0,nrow=nrow(MPO_ar),ncol=ncol(cbind(clss,clss_sc,clss_hc))))
#import data
data_nc19 <- read.csv("data_nc19.csv",header=T)
data_nc <- read.csv("data_nc.csv",header=T)
data_nc_comb <- rbind(data_nc19[,c(3,19:26)],data_nc[,c(3,23:30)])
clustd<-data_nc_comb
fhz<-tapply(clustd$Fairway.Hitsz,clustd$Name,mean,na.rm=T)
c1z<-tapply(clustd$Circle.1z,clustd$Name,mean,na.rm=T)
c2z<-tapply(clustd$Circle.2z,clustd$Name,mean,na.rm=T)
sz<-tapply(clustd$Scramblez,clustd$Name,mean,na.rm=T)
c1pz<-tapply(clustd$Circle.1.Puttingz,clustd$Name,mean,na.rm=T)
c2pz<-tapply(clustd$Circle.2.Puttingz,clustd$Name,mean,na.rm=T)
obz<-tapply(clustd$OBz,clustd$Name,mean,na.rm=T)
names<-names(fhz)
#create dataset for clustering
clustdm<-data.frame(fhz,c1z,c2z,sz,c1pz,c2pz,obz,names)
clustdm<-clustdm[table(data_nc_comb$Name)>5,] #removing players who played fewer than 5 events
clustdm<-clustdm[complete.cases(clustdm),]
#number of clusters (classes or player types)
nc <- c(2:6)
#############################
###hierarchical clustering###
#############################
dist_type <- c("euclidean","maximum","manhattan")
nc_dist_type <- expand.grid(nc,dist_type)
clss_hc <- as.data.frame(matrix(0,nrow=nrow(clustdm),ncol=nrow(nc_dist_type)))
for (i in 1:nrow(nc_dist_type)) {
dist_mat <- dist(clustdm[,1:7], method = nc_dist_type[i,2])
hclust_avg <- hclust(dist_mat, method = 'average')
#plot(hclust_avg)
cut_avg <- cutree(hclust_avg, k = nc_dist_type[i,1])
clss_hc[,i] <- as.numeric(cut_avg)
names(clss_hc)[i] <- paste(nc_dist_type[i,1],nc_dist_type[i,2],sep="_")
}
#require(dendextend)
#suppressPackageStartupMessages(library(dendextend))
#avg_dend_obj <- as.dendrogram(hclust_avg)
#avg_col_dend <- color_branches(avg_dend_obj, h = 5)
#plot(avg_col_dend)
####################
###GMM clustering###
####################
require(ClusterR)
#finding number of classes
opt_gmm = Optimal_Clusters_GMM(clustdm[,1:7], max_clusters = 10, criterion = "BIC",
dist_mode = "maha_dist", seed_mode = "random_subset",
km_iter = 10, em_iter = 10, var_floor = 1e-10,
plot_data = T)
#generate predictions for 2-6 classes
nc <- c(2:6)
clss <- as.data.frame(matrix(0,nrow=nrow(clustdm),ncol=length(nc)))
for (i in 1:length(nc)) {
#generating classes
gmm = GMM(clustdm[,1:7], nc[i], dist_mode = "maha_dist", seed_mode = "random_subset", km_iter = 10,
em_iter = 10, verbose = F)
#predicting class
pr = predict_GMM(clustdm[,1:7], gmm$centroids, gmm$covariance_matrices, gmm$weights)
#creating vector of class predictions
clss[,i] <- pr$cluster_labels
names(clss)[i] <- paste("nc",nc[i],sep="")
}
#plotting GMM results
require(ggplot2)
ggplot(clustdm, aes(x=c1z, y = c1pz, color = factor(cluster_labels))) + geom_point(size=3)
require(kernlab)
krn <- c("rbfdot","polydot","laplacedot","anovadot","splinedot")
nc_krn <- expand.grid(nc,krn)
clss_sc <- as.data.frame(matrix(0,nrow=nrow(clustdm),ncol=nrow(nc_krn)))
for (i in 1:nrow(nc_krn)) {
sc <- specc(as.matrix(clustdm[,1:7]), centers = nc_krn[i,1], kernel = nc_krn[i,2], kpar = "local")
clss_sc[,i] <- as.numeric(sc@.Data)
names(clss_sc)[i] <- paste(nc_krn[i,1],nc_krn[i,2],sep="_")
}
#combine datasets for cross-validation
clustdm_cv <- cbind(clustdm,clss,clss_sc,clss_hc)
>>>>>>> Stashed changes
require(lme4)
require(lmerTest)
require(MuMIn)
require(cAIC4)
# read in age and PDGA data
MPO_ar <- read.csv("MPO_ar.csv",header=T)
#MPO_ar dataset comes from "MPO_Aging.r" script
MPO_ar$years<-scale(MPO_ar$year)
MPO_ar$ages<-scale(MPO_ar$Age)
#combine ratings and classes (data comes from Player_type.r) for cross-validation of ratings
#can I make this betterc(faster) by pasting all at once then just using match to subset rows?
MPO_ar_tune <- data.frame(matrix(0,nrow=nrow(MPO_ar),ncol=ncol(cbind(clss,clss_sc,clss_hc))))
for (i in 1:nrow(MPO_ar))
{
if (any(grepl(MPO_ar$Name[i],clustdm_cv$names))) {MPO_ar_tune[i,]<-as.numeric(clustdm_cv[grep(paste(MPO_ar$Name_f[i],MPO_ar$Name[i],sep = " "),clustdm_cv$names),c(9:ncol(clustdm_cv))])}
else (MPO_ar_tune[i,]<-"NA")
}
<<<<<<< Updated upstream
#remove NAs and player type 3 (not enough age data for player type 3)
#MPO_ar_pt <- subset(MPO_ar,MPO_ar$ptype!="NA" & MPO_ar$ptype!="3")
# run cross-validation to compare predictions of age curves including
# player type versus excluding player type
#create dataframe for tuning and remove NAs
MPO_ar_tune2 <- data.frame(MPO_ar,MPO_ar_tune)
names(MPO_ar_tune2)[(ncol(MPO_ar_tune2)-44):ncol(MPO_ar_tune2)] <- names(clustdm_cv)[(ncol(clustdm_cv)-44):ncol(clustdm_cv)]
MPO_ar_pt <- subset(MPO_ar_tune2,MPO_ar_tune2$nc2!="NA")
#run loops
mean_SS_t <- data.frame(matrix(0,nrow=ncol(cbind(clss,clss_sc,clss_hc,clss_kmeans)),ncol=2))
for (j in (ncol(MPO_ar_tune2)-44):ncol(MPO_ar_tune2)) {
sumsq_p<-numeric(1000)
sumsq<-numeric(1000)
#training size
tz <- round(length(unique(MPO_ar_pt$PDGA))*.8)
for (i in 1:1000){
train <- sample(unique(MPO_ar_pt$PDGA),tz)
test <- unique(MPO_ar_pt$PDGA)[!unique(MPO_ar_pt$PDGA) %in% train]
MPO_ar_pt_train <- MPO_ar_pt[MPO_ar_pt$PDGA %in% train,]
MPO_ar_pt_test <- MPO_ar_pt[MPO_ar_pt$PDGA %in% test,]
pt_type <- MPO_ar_pt_train[,j]
pt_ages <- MPO_ar_pt_train$ages
pt_ratr <- MPO_ar_pt_train$ratr
MPO_ar_pt_train2 <- data.frame(pt_type,pt_ages,pt_ratr)
outp<-lm(pt_ratr~pt_type*pt_ages+pt_type*I(pt_ages^2)+pt_type*I(pt_ages^3)+pt_type*I(pt_ages^4),data=MPO_ar_pt_train2)
pt_type <- MPO_ar_pt_test[,j]
pt_ages <- MPO_ar_pt_test$ages
pt_ratr <- MPO_ar_pt_test$ratr
MPO_ar_pt_test2 <- data.frame(pt_type,pt_ages,pt_ratr)
#what is our method of measuring model predictive power
sumsq_p[i] <- sum((predict(outp,MPO_ar_pt_test2)-MPO_ar_pt_test2$pt_ratr)^2)
out<-lm(ratr~ages+I(ages^2)+I(ages^3)+I(ages^4),data=MPO_ar_pt_train)
sumsq[i] <- sum((predict(out,MPO_ar_pt_test)-MPO_ar_pt_test$ratr)^2)
for (i in 1:1000){
train <- sample(unique(MPO_ar_pt$PDGA),tz)
test <- unique(MPO_ar_pt$PDGA)[!unique(MPO_ar_pt$PDGA) %in% train]
MPO_ar_pt_train <- MPO_ar_pt[MPO_ar_pt$PDGA %in% train,]
MPO_ar_pt_test <- MPO_ar_pt[MPO_ar_pt$PDGA %in% test,]
pt_type <- MPO_ar_pt_train[,j]
pt_ages <- MPO_ar_pt_train$ages
pt_ratr <- MPO_ar_pt_train$ratr
MPO_ar_pt_train2 <- data.frame(pt_type,pt_ages,pt_ratr)
outp<-lm(pt_ratr~pt_type*pt_ages+pt_type*I(pt_ages^2)+pt_type*I(pt_ages^3)+pt_type*I(pt_ages^4),data=MPO_ar_pt_train2)
pt_type <- MPO_ar_pt_test[,j]
pt_ages <- MPO_ar_pt_test$ages
pt_ratr <- MPO_ar_pt_test$ratr
MPO_ar_pt_test2 <- data.frame(pt_type,pt_ages,pt_ratr)
#what is our method of measuring model predictive power
sumsq_p[i] <- sum((predict(outp,MPO_ar_pt_test2)-MPO_ar_pt_test2$pt_ratr)^2)
out<-lm(ratr~ages+I(ages^2)+I(ages^3)+I(ages^4),data=MPO_ar_pt_train)
sumsq[i] <- sum((predict(out,MPO_ar_pt_test)-MPO_ar_pt_test$ratr)^2)
}
mean_SS_t[j+1-13,1] <- mean(sumsq_p)
mean_SS_t[j+1-13,2] <- mean(sumsq)
head(sumsq_p)
=======
i
i<-408
(any(grepl(MPO_ar$Name[i],clustdm_cv$names)))
MPO_ar$Name[i]
clustdm_cv[grep(paste(MPO_ar$Name_f[i],MPO_ar$Name[i],sep = " ")
)
)
paste(MPO_ar$Name_f[i],MPO_ar$Name[i],sep = " ")
grep(paste(MPO_ar$Name_f[i],MPO_ar$Name[i],sep = " "),clustdm_cv$names)
paste(MPO_ar$Name_f[i],MPO_ar$Name[i],sep = " ")
clustdm_cv$names
MPO_ar[MPO_ar$Name_f[i],]
MPO_ar[MPO_ar$Name_f=="Johnny Sias",]
i
MPO_ar[408,]
i<-408
as.numeric(clustdm_cv[grep(paste(MPO_ar$Name_f[i],MPO_ar$Name[i],sep = " "),clustdm_cv$names),c(9:ncol(clustdm_cv))])
ncol(cbind(clss,clss_sc,clss_hc))
str(MPO_ar_tune)
>>>>>>> Stashed changes
